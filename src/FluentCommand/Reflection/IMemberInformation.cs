using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;

namespace FluentCommand.Reflection;

/// <summary>
/// Provides metadata and mapping details for a member (property or field) of an entity,
/// including database mapping, data annotations, and reflection information.
/// </summary>
public interface IMemberInformation
{
    /// <summary>
    /// Gets the <see cref="Type"/> of the member (property or field).
    /// </summary>
    /// <value>
    /// The <see cref="Type"/> representing the member's data type.
    /// </value>
    Type MemberType { get; }

    /// <summary>
    /// Gets the underlying <see cref="MemberInfo"/> for the member,
    /// which provides reflection-based access to metadata.
    /// </summary>
    /// <value>
    /// The <see cref="MemberInfo"/> instance for the member.
    /// </value>
    MemberInfo MemberInfo { get; }

    /// <summary>
    /// Gets the name of the member as defined in the entity class.
    /// </summary>
    /// <value>
    /// The member's name.
    /// </value>
    string Name { get; }

    /// <summary>
    /// Gets the name of the database column that the member is mapped to.
    /// This value is determined by the <see cref="ColumnAttribute.Name"/> property if specified,
    /// otherwise it defaults to the member name.
    /// </summary>
    /// <value>
    /// The mapped database column name.
    /// </value>
    string Column { get; }

    /// <summary>
    /// Gets the database provider-specific data type of the column the member is mapped to.
    /// This value is determined by the <see cref="ColumnAttribute.TypeName"/> property if specified.
    /// </summary>
    /// <value>
    /// The provider-specific column data type.
    /// </value>
    string ColumnType { get; }

    /// <summary>
    /// Gets the zero-based order of the column the member is mapped to in the database.
    /// This value is determined by the <see cref="ColumnAttribute.Order"/> property if specified.
    /// </summary>
    /// <value>
    /// The zero-based column order, or <c>null</c> if not specified.
    /// </value>
    int? ColumnOrder { get; }

    /// <summary>
    /// Gets a value indicating whether this member is the primary key for the entity.
    /// This is determined by the presence of the <see cref="KeyAttribute"/>.
    /// </summary>
    /// <value>
    /// <c>true</c> if this member is a primary key; otherwise, <c>false</c>.
    /// </value>
    bool IsKey { get; }

    /// <summary>
    /// Gets a value indicating whether this member should be excluded from database mapping.
    /// This is determined by the presence of the <see cref="NotMappedAttribute"/>.
    /// </summary>
    /// <value>
    /// <c>true</c> if this member is not mapped to a database column; otherwise, <c>false</c>.
    /// </value>
    bool IsNotMapped { get; }

    /// <summary>
    /// Gets a value indicating whether this member's value is generated by the database.
    /// This is determined by the presence of the <see cref="DatabaseGeneratedAttribute"/>.
    /// </summary>
    /// <value>
    /// <c>true</c> if the value is generated by the database; otherwise, <c>false</c>.
    /// </value>
    bool IsDatabaseGenerated { get; }

    /// <summary>
    /// Gets a value indicating whether this member participates in optimistic concurrency checks.
    /// This is determined by the presence of the <see cref="ConcurrencyCheckAttribute"/>.
    /// </summary>
    /// <value>
    /// <c>true</c> if this member is used for concurrency checking; otherwise, <c>false</c>.
    /// </value>
    bool IsConcurrencyCheck { get; }

    /// <summary>
    /// Gets the name of the associated navigation property or foreign key(s) for this member.
    /// This value is determined by the <see cref="ForeignKeyAttribute.Name"/> property if specified.
    /// </summary>
    /// <value>
    /// The name of the navigation property or foreign key(s), or <c>null</c> if not applicable.
    /// </value>
    string ForeignKey { get; }

    /// <summary>
    /// Gets a value indicating whether this member has a getter method.
    /// </summary>
    /// <value>
    /// <c>true</c> if the member has a getter; otherwise, <c>false</c>.
    /// </value>
    bool HasGetter { get; }

    /// <summary>
    /// Gets a value indicating whether this member has a setter method.
    /// </summary>
    /// <value>
    /// <c>true</c> if the member has a setter; otherwise, <c>false</c>.
    /// </value>
    bool HasSetter { get; }

    /// <summary>
    /// Gets a value indicating whether this member is required (non-nullable or marked as required).
    /// This is determined by the presence of the <see cref="RequiredAttribute"/>.
    /// </summary>
    /// <value>
    /// <c>true</c> if the member is required; otherwise, <c>false</c>.
    /// </value>
    bool IsRequired { get; }

    /// <summary>
    /// Gets the display name of the member, typically used for UI or reporting purposes.
    /// This value is determined by the <see cref="DisplayAttribute.Name"/> property if specified.
    /// </summary>
    /// <value>
    /// The display name of the member.
    /// </value>
    string DisplayName { get; }

    /// <summary>
    /// Gets the format string used to display the member's value, if specified.
    /// This value is determined by the <see cref="DisplayFormatAttribute.DataFormatString"/> property if present.
    /// </summary>
    /// <value>
    /// The data format string for display formatting, or <c>null</c> if not specified.
    /// </value>
    string DataFormatString { get; }
}
