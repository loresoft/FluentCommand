// <auto-generated>
//     Generated by the FluentCommand source generator.
// </auto-generated>

using global::FluentCommand.Extensions;

namespace FluentCommand.Entities
{
    /// <summary>
    /// Extension methods for FluentCommand
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("FluentCommand.Generators", "1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static partial class StatusDataReaderExtensions
    {
        /// <summary>
        /// Executes the command against the connection and converts the results to <see cref="T:FluentCommand.Entities.Status"/> objects.
        /// </summary>
        /// <param name="dataQuery">The <see cref="T:FluentCommand.IDataQuery"/> for this extension method.</param>
        /// <returns>
        /// An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:FluentCommand.Entities.Status"/> objects.
        /// </returns>
        public static global::System.Collections.Generic.IEnumerable<FluentCommand.Entities.Status> Query<TEntity>(
            this global::FluentCommand.IDataQuery dataQuery)
            where TEntity : FluentCommand.Entities.Status
        {
            return dataQuery.Query<FluentCommand.Entities.Status>(
                factory: StatusDataReaderExtensions.StatusFactory,
                commandBehavior: global::System.Data.CommandBehavior.SequentialAccess |
                                 global::System.Data.CommandBehavior.SingleResult);
        }

        /// <summary>
        /// Executes the query and returns the first row in the result as a <see cref="T:FluentCommand.Entities.Status"/> object.
        /// </summary>
        /// <param name="dataQuery">The <see cref="T:FluentCommand.IDataQuery"/> for this extension method.</param>
        /// <returns>
        /// A instance of <see cref="T:FluentCommand.Entities.Status"/>  if row exists; otherwise null.
        /// </returns>
        public static FluentCommand.Entities.Status QuerySingle<TEntity>(
            this global::FluentCommand.IDataQuery dataQuery)
            where TEntity : FluentCommand.Entities.Status
        {
            return dataQuery.QuerySingle<FluentCommand.Entities.Status>(
                factory: StatusDataReaderExtensions.StatusFactory,
                commandBehavior: global::System.Data.CommandBehavior.SequentialAccess |
                                 global::System.Data.CommandBehavior.SingleResult |
                                 global::System.Data.CommandBehavior.SingleRow);
        }

        /// <summary>
        /// Executes the command against the connection and converts the results to <see cref="T:FluentCommand.Entities.Status"/> objects.
        /// </summary>
        /// <param name="dataQuery">The <see cref="T:FluentCommand.IDataQueryAsync"/> for this extension method.</param>
        /// <param name="cancellationToken">The cancellation instruction.</param>
        /// <returns>
        /// An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:FluentCommand.Entities.Status"/> objects.
        /// </returns>
        public static global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<FluentCommand.Entities.Status>> QueryAsync<TEntity>(
            this global::FluentCommand.IDataQueryAsync dataQuery,
            global::System.Threading.CancellationToken cancellationToken = default)
            where TEntity : FluentCommand.Entities.Status
        {
            return dataQuery.QueryAsync<FluentCommand.Entities.Status>(
                factory: StatusDataReaderExtensions.StatusFactory,
                commandBehavior: global::System.Data.CommandBehavior.SequentialAccess |
                                 global::System.Data.CommandBehavior.SingleResult,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Executes the query and returns the first row in the result as a <see cref="T:FluentCommand.Entities.Status"/> object.
        /// </summary>
        /// <param name="dataQuery">The <see cref="T:FluentCommand.IDataQueryAsync"/> for this extension method.</param>
        /// <param name="cancellationToken">The cancellation instruction.</param>
        /// <returns>
        /// A instance of <see cref="T:FluentCommand.Entities.Status"/>  if row exists; otherwise null.
        /// </returns>
        public static global::System.Threading.Tasks.Task<FluentCommand.Entities.Status> QuerySingleAsync<TEntity>(
            this global::FluentCommand.IDataQueryAsync dataQuery,
            global::System.Threading.CancellationToken cancellationToken = default)
            where TEntity : FluentCommand.Entities.Status
        {
            return dataQuery.QuerySingleAsync<FluentCommand.Entities.Status>(
                factory: StatusDataReaderExtensions.StatusFactory,
                commandBehavior: global::System.Data.CommandBehavior.SequentialAccess |
                                 global::System.Data.CommandBehavior.SingleResult |
                                 global::System.Data.CommandBehavior.SingleRow,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// A factory for creating <see cref="T:FluentCommand.Entities.Status"/> objects from the current row in the specified <paramref name="dataRecord"/>.
        /// </summary>
        /// <param name="dataRecord">The open <see cref="T:System.Data.IDataReader"/> to get the object from.</param>
        /// <returns>
        /// A instance of <see cref="FluentCommand.Entities.Status"/>  having property names set that match the field names in the <paramref name="dataRecord"/>.
        /// </returns>
        public static FluentCommand.Entities.Status StatusFactory(this global::System.Data.IDataReader dataRecord)
        {
            if (dataRecord == null)
                throw new global::System.ArgumentNullException(nameof(dataRecord));

            int v_id = default;
            string v_name = default;
            bool v_isActive = default;
            System.DateTimeOffset v_updated = default;
            byte[] v_rowVersion = default;

            for (var __index = 0; __index < dataRecord.FieldCount; __index++)
            {
                if (dataRecord.IsDBNull(__index))
                     continue;

                var __name = dataRecord.GetName(__index);
                switch (__name)
                {
                    case nameof(FluentCommand.Entities.Status.Id):
                        v_id = dataRecord.GetInt32(__index);
                        break;
                    case nameof(FluentCommand.Entities.Status.Name):
                        v_name = dataRecord.GetString(__index);
                        break;
                    case nameof(FluentCommand.Entities.Status.IsActive):
                        v_isActive = dataRecord.GetBoolean(__index);
                        break;
                    case nameof(FluentCommand.Entities.Status.Updated):
                        v_updated = dataRecord.GetDateTimeOffset(__index);
                        break;
                    case nameof(FluentCommand.Entities.Status.RowVersion):
                        v_rowVersion = dataRecord.GetBytes(__index);
                        break;
                }
            }

            return new FluentCommand.Entities.Status
            {
                Id =  v_id,
                Name =  v_name,
                IsActive =  v_isActive,
                Updated =  v_updated,
                RowVersion =  v_rowVersion
            };
        }

    }
}
